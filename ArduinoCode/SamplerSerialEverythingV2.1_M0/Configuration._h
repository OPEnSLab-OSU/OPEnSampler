//Configuration.h

#pragma once

#include <stdint.h>

enum class Mode {DAILY, PERIODIC};

/**
   Stores OPEnSampler's configuration values
   Storing configuration in this class (as opposed to global struct like in earlier iterations) ensures these
   values are accessed/updated/validated consistently.
*/
class configClass
{
  public:
    void setDefaults();

    void getConfigData(uint8_t data[]);

    void setDailyAlarm(unsigned int hour, unsigned int minute);

    void setPeriodicAlarm(unsigned int minutes);
    void refreshPeriodicAlarm();

    void setMode(Mode mode);
    void setWritten(bool written);
    void setSampleDuration(unsigned long milliseconds);
    void setFlushDuration(unsigned long milliseconds);
    void setBagFlushDuration(unsigned long milliseconds);
    uint8_t setSampleHour(unsigned int hour);
    uint8_t setSampleMinute(unsigned int minute);
    void setSMSNumber(int index, char *buffer);
    void setValveNumber(unsigned int valveNumber);

    Mode getMode();
    bool getWritten();
    unsigned long getFlushDuration();
    unsigned long getBagFlushDuration();
    unsigned long getSampleDuration();
    uint8_t getSampleHour();
    uint8_t getSampleMinute();
    char * getSMSNumber(int index);
    uint16_t getPeriodicAlarmLength();
    uint8_t getValveNumber();

    void read_non_volatile();
    void write_non_volatile();

  private:
    // This is stored as a struct so it can be easily written to flash.
    config_flash_t configData;
};
